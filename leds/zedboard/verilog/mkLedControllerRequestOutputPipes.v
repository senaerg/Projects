//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// timestamp removed
//
//
// Ports:
// Name                         I/O  size props
// portalIfc_messageSize          O    16 const
// RDY_portalIfc_messageSize      O     1 const
// portalIfc_indications_0_first  O    32
// RDY_portalIfc_indications_0_first  O     1 reg
// RDY_portalIfc_indications_0_deq  O     1 reg
// portalIfc_indications_0_notEmpty  O     1 reg
// RDY_portalIfc_indications_0_notEmpty  O     1 const
// portalIfc_intr_status          O     1 reg
// RDY_portalIfc_intr_status      O     1 const
// portalIfc_intr_channel         O    32
// RDY_portalIfc_intr_channel     O     1 const
// RDY_ifc_setLeds                O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// portalIfc_messageSize_methodNumber  I    16 unused
// ifc_setLeds_v                  I     8 reg
// ifc_setLeds_duration           I    32 reg
// EN_portalIfc_indications_0_deq  I     1
// EN_ifc_setLeds                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkLedControllerRequestOutputPipes(CLK,
					 RST_N,

					 portalIfc_messageSize_methodNumber,
					 portalIfc_messageSize,
					 RDY_portalIfc_messageSize,

					 portalIfc_indications_0_first,
					 RDY_portalIfc_indications_0_first,

					 EN_portalIfc_indications_0_deq,
					 RDY_portalIfc_indications_0_deq,

					 portalIfc_indications_0_notEmpty,
					 RDY_portalIfc_indications_0_notEmpty,

					 portalIfc_intr_status,
					 RDY_portalIfc_intr_status,

					 portalIfc_intr_channel,
					 RDY_portalIfc_intr_channel,

					 ifc_setLeds_v,
					 ifc_setLeds_duration,
					 EN_ifc_setLeds,
					 RDY_ifc_setLeds);
  input  CLK;
  input  RST_N;

  // value method portalIfc_messageSize
  input  [15 : 0] portalIfc_messageSize_methodNumber;
  output [15 : 0] portalIfc_messageSize;
  output RDY_portalIfc_messageSize;

  // value method portalIfc_indications_0_first
  output [31 : 0] portalIfc_indications_0_first;
  output RDY_portalIfc_indications_0_first;

  // action method portalIfc_indications_0_deq
  input  EN_portalIfc_indications_0_deq;
  output RDY_portalIfc_indications_0_deq;

  // value method portalIfc_indications_0_notEmpty
  output portalIfc_indications_0_notEmpty;
  output RDY_portalIfc_indications_0_notEmpty;

  // value method portalIfc_intr_status
  output portalIfc_intr_status;
  output RDY_portalIfc_intr_status;

  // value method portalIfc_intr_channel
  output [31 : 0] portalIfc_intr_channel;
  output RDY_portalIfc_intr_channel;

  // action method ifc_setLeds
  input  [7 : 0] ifc_setLeds_v;
  input  [31 : 0] ifc_setLeds_duration;
  input  EN_ifc_setLeds;
  output RDY_ifc_setLeds;

  // signals for module outputs
  wire [31 : 0] portalIfc_indications_0_first, portalIfc_intr_channel;
  wire [15 : 0] portalIfc_messageSize;
  wire RDY_ifc_setLeds,
       RDY_portalIfc_indications_0_deq,
       RDY_portalIfc_indications_0_first,
       RDY_portalIfc_indications_0_notEmpty,
       RDY_portalIfc_intr_channel,
       RDY_portalIfc_intr_status,
       RDY_portalIfc_messageSize,
       portalIfc_indications_0_notEmpty,
       portalIfc_intr_status;

  // register setLeds_responseFifo_count
  reg setLeds_responseFifo_count;
  wire setLeds_responseFifo_count_D_IN, setLeds_responseFifo_count_EN;

  // register setLeds_responseFifo_shift
  reg [6 : 0] setLeds_responseFifo_shift;
  wire [6 : 0] setLeds_responseFifo_shift_D_IN;
  wire setLeds_responseFifo_shift_EN;

  // ports of submodule setLeds_responseFifo_fifo
  wire [63 : 0] setLeds_responseFifo_fifo_D_IN,
		setLeds_responseFifo_fifo_D_OUT;
  wire setLeds_responseFifo_fifo_CLR,
       setLeds_responseFifo_fifo_DEQ,
       setLeds_responseFifo_fifo_EMPTY_N,
       setLeds_responseFifo_fifo_ENQ,
       setLeds_responseFifo_fifo_FULL_N;

  // remaining internal signals
  wire [63 : 0] x__h329;
  wire [6 : 0] x__h476;
  wire x__h425;

  // value method portalIfc_messageSize
  assign portalIfc_messageSize = 16'd40 ;
  assign RDY_portalIfc_messageSize = 1'd1 ;

  // value method portalIfc_indications_0_first
  assign portalIfc_indications_0_first = x__h329[63:32] ;
  assign RDY_portalIfc_indications_0_first =
	     setLeds_responseFifo_fifo_EMPTY_N ;

  // action method portalIfc_indications_0_deq
  assign RDY_portalIfc_indications_0_deq = setLeds_responseFifo_fifo_EMPTY_N ;

  // value method portalIfc_indications_0_notEmpty
  assign portalIfc_indications_0_notEmpty =
	     setLeds_responseFifo_fifo_EMPTY_N ;
  assign RDY_portalIfc_indications_0_notEmpty = 1'd1 ;

  // value method portalIfc_intr_status
  assign portalIfc_intr_status = setLeds_responseFifo_fifo_EMPTY_N ;
  assign RDY_portalIfc_intr_status = 1'd1 ;

  // value method portalIfc_intr_channel
  assign portalIfc_intr_channel =
	     setLeds_responseFifo_fifo_EMPTY_N ? 32'd0 : 32'hFFFFFFFF ;
  assign RDY_portalIfc_intr_channel = 1'd1 ;

  // action method ifc_setLeds
  assign RDY_ifc_setLeds = setLeds_responseFifo_fifo_FULL_N ;

  // submodule setLeds_responseFifo_fifo
  FIFO1 #(.width(32'd64),
	  .guarded(32'd1)) setLeds_responseFifo_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(setLeds_responseFifo_fifo_D_IN),
						     .ENQ(setLeds_responseFifo_fifo_ENQ),
						     .DEQ(setLeds_responseFifo_fifo_DEQ),
						     .CLR(setLeds_responseFifo_fifo_CLR),
						     .D_OUT(setLeds_responseFifo_fifo_D_OUT),
						     .FULL_N(setLeds_responseFifo_fifo_FULL_N),
						     .EMPTY_N(setLeds_responseFifo_fifo_EMPTY_N));

  // register setLeds_responseFifo_count
  assign setLeds_responseFifo_count_D_IN =
	     !setLeds_responseFifo_count && x__h425 ;
  assign setLeds_responseFifo_count_EN = EN_portalIfc_indications_0_deq ;

  // register setLeds_responseFifo_shift
  assign setLeds_responseFifo_shift_D_IN =
	     setLeds_responseFifo_count ? 7'd0 : x__h476 ;
  assign setLeds_responseFifo_shift_EN = EN_portalIfc_indications_0_deq ;

  // submodule setLeds_responseFifo_fifo
  assign setLeds_responseFifo_fifo_D_IN =
	     { 24'd0, ifc_setLeds_v, ifc_setLeds_duration } ;
  assign setLeds_responseFifo_fifo_ENQ = EN_ifc_setLeds ;
  assign setLeds_responseFifo_fifo_DEQ =
	     EN_portalIfc_indications_0_deq && setLeds_responseFifo_count ;
  assign setLeds_responseFifo_fifo_CLR = 1'b0 ;

  // remaining internal signals
  assign x__h329 =
	     setLeds_responseFifo_fifo_D_OUT << setLeds_responseFifo_shift ;
  assign x__h425 = setLeds_responseFifo_count + 1'd1 ;
  assign x__h476 = setLeds_responseFifo_shift + 7'd32 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        setLeds_responseFifo_count <= `BSV_ASSIGNMENT_DELAY 1'd0;
	setLeds_responseFifo_shift <= `BSV_ASSIGNMENT_DELAY 7'd0;
      end
    else
      begin
        if (setLeds_responseFifo_count_EN)
	  setLeds_responseFifo_count <= `BSV_ASSIGNMENT_DELAY
	      setLeds_responseFifo_count_D_IN;
	if (setLeds_responseFifo_shift_EN)
	  setLeds_responseFifo_shift <= `BSV_ASSIGNMENT_DELAY
	      setLeds_responseFifo_shift_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    setLeds_responseFifo_count = 1'h0;
    setLeds_responseFifo_shift = 7'h2A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkLedControllerRequestOutputPipes

