=== Generated schedule for mkMemMasterEngine ===

Method schedule
---------------
Method: tlp_request_get
Ready signal: tlpOutFifo.i_notEmpty
Conflict-free: tlp_response_put,
	       master_read_client_readReq_get,
	       master_read_client_readData_put,
	       master_write_client_writeReq_get,
	       master_write_client_writeData_get,
	       master_write_client_writeDone_put
Conflicts: tlp_request_get
 
Method: tlp_response_put
Ready signal: ((! readHeaderFifo.notFull) || readHeaderFifo.i_notFull) &&
	      ((! writeHeaderFifo.notFull) || writeHeaderFifo.i_notFull)
Conflict-free: tlp_request_get,
	       master_read_client_readData_put,
	       master_write_client_writeData_get,
	       master_write_client_writeDone_put
Sequenced before: master_read_client_readReq_get,
		  master_write_client_writeReq_get
Conflicts: tlp_response_put
 
Method: master_read_client_readReq_get
Ready signal: readHeaderFifo.i_notEmpty && readDataFifo.i_notFull
Conflict-free: tlp_request_get,
	       master_read_client_readData_put,
	       master_write_client_writeReq_get,
	       master_write_client_writeData_get,
	       master_write_client_writeDone_put
Sequenced after: tlp_response_put
Conflicts: master_read_client_readReq_get
 
Method: master_read_client_readData_put
Ready signal: (completionMimo_ifc_rDataCount < 3'd4) &&
	      (! (completionMimo_ifc_rDataAvail == 3'd0))
Conflict-free: tlp_request_get,
	       tlp_response_put,
	       master_read_client_readReq_get,
	       master_write_client_writeReq_get,
	       master_write_client_writeData_get,
	       master_write_client_writeDone_put
Conflicts: master_read_client_readData_put
 
Method: master_write_client_writeReq_get
Ready signal: writeHeaderFifo.i_notEmpty && writeDataFifo.i_notFull
Conflict-free: tlp_request_get,
	       master_read_client_readReq_get,
	       master_read_client_readData_put,
	       master_write_client_writeData_get,
	       master_write_client_writeDone_put
Sequenced after: tlp_response_put
Conflicts: master_write_client_writeReq_get
 
Method: master_write_client_writeData_get
Ready signal: writeDataFifo.i_notEmpty
Conflict-free: tlp_request_get,
	       tlp_response_put,
	       master_read_client_readReq_get,
	       master_read_client_readData_put,
	       master_write_client_writeReq_get,
	       master_write_client_writeDone_put
Conflicts: master_write_client_writeData_get
 
Method: master_write_client_writeDone_put
Ready signal: True
Conflict-free: tlp_request_get,
	       tlp_response_put,
	       master_read_client_readReq_get,
	       master_read_client_readData_put,
	       master_write_client_writeReq_get,
	       master_write_client_writeData_get,
	       master_write_client_writeDone_put
 
Rule schedule
-------------
Rule: completionMimo_ifc_update
Predicate: True
Blocking rules: (none)
 
Rule: completionHeader
Predicate: (! (completionMimo_ifc_rDataCount == 3'd0)) &&
	   tlpOutFifo.i_notFull && readDataFifo.i_notEmpty &&
	   (! readInProgress) && readDataFifo.notEmpty
Blocking rules: (none)
 
Rule: continuation
Predicate: (! (completionMimo_ifc_rDataCount == 3'd0)) &&
	   tlpOutFifo.i_notFull &&
	   (readBurstCountGreaterThan4 || readDataFifo.i_notEmpty) &&
	   readInProgress &&
	   (! (completionMimo_ifc_rDataCount < completionMimoDeqCount))
Blocking rules: (none)
 
Logical execution order: tlp_request_get,
			 master_read_client_readData_put,
			 master_write_client_writeData_get,
			 master_write_client_writeDone_put,
			 completionHeader,
			 tlp_response_put,
			 master_read_client_readReq_get,
			 master_write_client_writeReq_get,
			 continuation,
			 completionMimo_ifc_update

=================================================
