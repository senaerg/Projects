/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Wed Mar 25 12:47:42 EDT 2015
 * 
 */
#include "bluesim_primitives.h"
#include "mkLedControllerRequestInputPipes.h"


/* Constructor */
MOD_mkLedControllerRequestInputPipes::MOD_mkLedControllerRequestInputPipes(tSimStateHdl simHdl,
									   char const *name,
									   Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_setLeds_requestFifo_count(simHdl,
				   "setLeds_requestFifo_count",
				   this,
				   1u,
				   (tUInt8)0u,
				   (tUInt8)0u),
    INST_setLeds_requestFifo_fbnbuff(simHdl,
				     "setLeds_requestFifo_fbnbuff",
				     this,
				     64u,
				     0llu,
				     (tUInt8)0u),
    INST_setLeds_requestFifo_fifo(simHdl, "setLeds_requestFifo_fifo", this, 40u, 1u, 1u, 0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 4u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkLedControllerRequestInputPipes::init_symbols_0()
{
  init_symbol(&symbols[0u], "setLeds_requestFifo_count", SYM_MODULE, &INST_setLeds_requestFifo_count);
  init_symbol(&symbols[1u],
	      "setLeds_requestFifo_count__h354",
	      SYM_DEF,
	      &DEF_setLeds_requestFifo_count__h354,
	      1u);
  init_symbol(&symbols[2u],
	      "setLeds_requestFifo_fbnbuff",
	      SYM_MODULE,
	      &INST_setLeds_requestFifo_fbnbuff);
  init_symbol(&symbols[3u], "setLeds_requestFifo_fifo", SYM_MODULE, &INST_setLeds_requestFifo_fifo);
}


/* Rule actions */


/* Methods */

tUInt32 MOD_mkLedControllerRequestInputPipes::METH_portalIfc_messageSize(tUInt32 ARG_portalIfc_messageSize_methodNumber)
{
  tUInt32 PORT_portalIfc_messageSize;
  PORT_portalIfc_messageSize = 40u;
  return PORT_portalIfc_messageSize;
}

tUInt8 MOD_mkLedControllerRequestInputPipes::METH_RDY_portalIfc_messageSize()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_messageSize;
  tUInt8 PORT_RDY_portalIfc_messageSize;
  DEF_CAN_FIRE_portalIfc_messageSize = (tUInt8)1u;
  PORT_RDY_portalIfc_messageSize = DEF_CAN_FIRE_portalIfc_messageSize;
  return PORT_RDY_portalIfc_messageSize;
}

tUInt8 MOD_mkLedControllerRequestInputPipes::METH_portalIfc_intr_status()
{
  tUInt8 PORT_portalIfc_intr_status;
  PORT_portalIfc_intr_status = (tUInt8)0u;
  return PORT_portalIfc_intr_status;
}

tUInt8 MOD_mkLedControllerRequestInputPipes::METH_RDY_portalIfc_intr_status()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_intr_status;
  tUInt8 PORT_RDY_portalIfc_intr_status;
  DEF_CAN_FIRE_portalIfc_intr_status = (tUInt8)1u;
  PORT_RDY_portalIfc_intr_status = DEF_CAN_FIRE_portalIfc_intr_status;
  return PORT_RDY_portalIfc_intr_status;
}

tUInt32 MOD_mkLedControllerRequestInputPipes::METH_portalIfc_intr_channel()
{
  tUInt32 PORT_portalIfc_intr_channel;
  PORT_portalIfc_intr_channel = 4294967295u;
  return PORT_portalIfc_intr_channel;
}

tUInt8 MOD_mkLedControllerRequestInputPipes::METH_RDY_portalIfc_intr_channel()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_intr_channel;
  tUInt8 PORT_RDY_portalIfc_intr_channel;
  DEF_CAN_FIRE_portalIfc_intr_channel = (tUInt8)1u;
  PORT_RDY_portalIfc_intr_channel = DEF_CAN_FIRE_portalIfc_intr_channel;
  return PORT_RDY_portalIfc_intr_channel;
}

void MOD_mkLedControllerRequestInputPipes::METH_portalIfc_requests_0_enq(tUInt32 ARG_portalIfc_requests_0_enq_v)
{
  tUInt64 DEF_x__h393;
  tUInt64 DEF_newbuff__h322;
  tUInt8 DEF_x__h362;
  tUInt8 DEF_NOT_setLeds_requestFifo_count_AND_setLeds_requ_ETC___d7;
  tUInt8 DEF__read_BITS_31_TO_0__BITS_7_TO_0___h402;
  tUInt32 DEF__read_BITS_31_TO_0___h349;
  tUInt64 DEF__read__h80;
  DEF__read__h80 = INST_setLeds_requestFifo_fbnbuff.METH_read();
  DEF_setLeds_requestFifo_count__h354 = INST_setLeds_requestFifo_count.METH_read();
  DEF__read_BITS_31_TO_0___h349 = (tUInt32)(DEF__read__h80);
  DEF__read_BITS_31_TO_0__BITS_7_TO_0___h402 = (tUInt8)((tUInt8)255u & DEF__read__h80);
  DEF_NOT_setLeds_requestFifo_count___d5 = !DEF_setLeds_requestFifo_count__h354;
  DEF_x__h362 = (tUInt8)1u & (DEF_setLeds_requestFifo_count__h354 + (tUInt8)1u);
  DEF_NOT_setLeds_requestFifo_count_AND_setLeds_requ_ETC___d7 = DEF_NOT_setLeds_requestFifo_count___d5 && DEF_x__h362;
  DEF_newbuff__h322 = (((tUInt64)(DEF__read_BITS_31_TO_0___h349)) << 32u) | (tUInt64)(ARG_portalIfc_requests_0_enq_v);
  DEF_x__h393 = 1099511627775llu & ((((tUInt64)(DEF__read_BITS_31_TO_0__BITS_7_TO_0___h402)) << 32u) | (tUInt64)(ARG_portalIfc_requests_0_enq_v));
  INST_setLeds_requestFifo_fbnbuff.METH_write(DEF_newbuff__h322);
  INST_setLeds_requestFifo_count.METH_write(DEF_NOT_setLeds_requestFifo_count_AND_setLeds_requ_ETC___d7);
  if (DEF_setLeds_requestFifo_count__h354)
    INST_setLeds_requestFifo_fifo.METH_enq(DEF_x__h393);
}

tUInt8 MOD_mkLedControllerRequestInputPipes::METH_RDY_portalIfc_requests_0_enq()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_requests_0_enq;
  tUInt8 PORT_RDY_portalIfc_requests_0_enq;
  DEF_setLeds_requestFifo_fifo_notFull____d10 = INST_setLeds_requestFifo_fifo.METH_notFull();
  DEF_setLeds_requestFifo_count__h354 = INST_setLeds_requestFifo_count.METH_read();
  DEF_NOT_setLeds_requestFifo_count___d5 = !DEF_setLeds_requestFifo_count__h354;
  DEF_CAN_FIRE_portalIfc_requests_0_enq = (DEF_NOT_setLeds_requestFifo_count___d5 || DEF_setLeds_requestFifo_fifo_notFull____d10) && (DEF_NOT_setLeds_requestFifo_count___d5 || INST_setLeds_requestFifo_fifo.METH_i_notFull());
  PORT_RDY_portalIfc_requests_0_enq = DEF_CAN_FIRE_portalIfc_requests_0_enq;
  return PORT_RDY_portalIfc_requests_0_enq;
}

tUInt8 MOD_mkLedControllerRequestInputPipes::METH_portalIfc_requests_0_notFull()
{
  tUInt8 PORT_portalIfc_requests_0_notFull;
  DEF_setLeds_requestFifo_fifo_notFull____d10 = INST_setLeds_requestFifo_fifo.METH_notFull();
  PORT_portalIfc_requests_0_notFull = DEF_setLeds_requestFifo_fifo_notFull____d10;
  return PORT_portalIfc_requests_0_notFull;
}

tUInt8 MOD_mkLedControllerRequestInputPipes::METH_RDY_portalIfc_requests_0_notFull()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_requests_0_notFull;
  tUInt8 PORT_RDY_portalIfc_requests_0_notFull;
  DEF_CAN_FIRE_portalIfc_requests_0_notFull = (tUInt8)1u;
  PORT_RDY_portalIfc_requests_0_notFull = DEF_CAN_FIRE_portalIfc_requests_0_notFull;
  return PORT_RDY_portalIfc_requests_0_notFull;
}

tUInt64 MOD_mkLedControllerRequestInputPipes::METH_setLeds_PipeOut_first()
{
  tUInt64 PORT_setLeds_PipeOut_first;
  PORT_setLeds_PipeOut_first = INST_setLeds_requestFifo_fifo.METH_first();
  return PORT_setLeds_PipeOut_first;
}

tUInt8 MOD_mkLedControllerRequestInputPipes::METH_RDY_setLeds_PipeOut_first()
{
  tUInt8 DEF_CAN_FIRE_setLeds_PipeOut_first;
  tUInt8 PORT_RDY_setLeds_PipeOut_first;
  DEF_setLeds_requestFifo_fifo_i_notEmpty____d14 = INST_setLeds_requestFifo_fifo.METH_i_notEmpty();
  DEF_CAN_FIRE_setLeds_PipeOut_first = DEF_setLeds_requestFifo_fifo_i_notEmpty____d14;
  PORT_RDY_setLeds_PipeOut_first = DEF_CAN_FIRE_setLeds_PipeOut_first;
  return PORT_RDY_setLeds_PipeOut_first;
}

void MOD_mkLedControllerRequestInputPipes::METH_setLeds_PipeOut_deq()
{
  INST_setLeds_requestFifo_fifo.METH_deq();
}

tUInt8 MOD_mkLedControllerRequestInputPipes::METH_RDY_setLeds_PipeOut_deq()
{
  tUInt8 DEF_CAN_FIRE_setLeds_PipeOut_deq;
  tUInt8 PORT_RDY_setLeds_PipeOut_deq;
  DEF_setLeds_requestFifo_fifo_i_notEmpty____d14 = INST_setLeds_requestFifo_fifo.METH_i_notEmpty();
  DEF_CAN_FIRE_setLeds_PipeOut_deq = DEF_setLeds_requestFifo_fifo_i_notEmpty____d14;
  PORT_RDY_setLeds_PipeOut_deq = DEF_CAN_FIRE_setLeds_PipeOut_deq;
  return PORT_RDY_setLeds_PipeOut_deq;
}

tUInt8 MOD_mkLedControllerRequestInputPipes::METH_setLeds_PipeOut_notEmpty()
{
  tUInt8 PORT_setLeds_PipeOut_notEmpty;
  PORT_setLeds_PipeOut_notEmpty = INST_setLeds_requestFifo_fifo.METH_notEmpty();
  return PORT_setLeds_PipeOut_notEmpty;
}

tUInt8 MOD_mkLedControllerRequestInputPipes::METH_RDY_setLeds_PipeOut_notEmpty()
{
  tUInt8 DEF_CAN_FIRE_setLeds_PipeOut_notEmpty;
  tUInt8 PORT_RDY_setLeds_PipeOut_notEmpty;
  DEF_CAN_FIRE_setLeds_PipeOut_notEmpty = (tUInt8)1u;
  PORT_RDY_setLeds_PipeOut_notEmpty = DEF_CAN_FIRE_setLeds_PipeOut_notEmpty;
  return PORT_RDY_setLeds_PipeOut_notEmpty;
}


/* Reset routines */

void MOD_mkLedControllerRequestInputPipes::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_setLeds_requestFifo_fifo.reset_RST(ARG_rst_in);
  INST_setLeds_requestFifo_fbnbuff.reset_RST(ARG_rst_in);
  INST_setLeds_requestFifo_count.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkLedControllerRequestInputPipes::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkLedControllerRequestInputPipes::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_setLeds_requestFifo_count.dump_state(indent + 2u);
  INST_setLeds_requestFifo_fbnbuff.dump_state(indent + 2u);
  INST_setLeds_requestFifo_fifo.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkLedControllerRequestInputPipes::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 8u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_setLeds_requestFifo_count___d5", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "setLeds_requestFifo_count__h354", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "setLeds_requestFifo_fifo_i_notEmpty____d14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "setLeds_requestFifo_fifo_notFull____d10", 1u);
  num = INST_setLeds_requestFifo_count.dump_VCD_defs(num);
  num = INST_setLeds_requestFifo_fbnbuff.dump_VCD_defs(num);
  num = INST_setLeds_requestFifo_fifo.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkLedControllerRequestInputPipes::dump_VCD(tVCDDumpType dt,
						    unsigned int levels,
						    MOD_mkLedControllerRequestInputPipes &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkLedControllerRequestInputPipes::vcd_defs(tVCDDumpType dt,
						    MOD_mkLedControllerRequestInputPipes &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_NOT_setLeds_requestFifo_count___d5) != DEF_NOT_setLeds_requestFifo_count___d5)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_setLeds_requestFifo_count___d5, 1u);
	backing.DEF_NOT_setLeds_requestFifo_count___d5 = DEF_NOT_setLeds_requestFifo_count___d5;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_setLeds_requestFifo_count__h354) != DEF_setLeds_requestFifo_count__h354)
      {
	vcd_write_val(sim_hdl, num, DEF_setLeds_requestFifo_count__h354, 1u);
	backing.DEF_setLeds_requestFifo_count__h354 = DEF_setLeds_requestFifo_count__h354;
      }
      ++num;
      if ((backing.DEF_setLeds_requestFifo_fifo_i_notEmpty____d14) != DEF_setLeds_requestFifo_fifo_i_notEmpty____d14)
      {
	vcd_write_val(sim_hdl, num, DEF_setLeds_requestFifo_fifo_i_notEmpty____d14, 1u);
	backing.DEF_setLeds_requestFifo_fifo_i_notEmpty____d14 = DEF_setLeds_requestFifo_fifo_i_notEmpty____d14;
      }
      ++num;
      if ((backing.DEF_setLeds_requestFifo_fifo_notFull____d10) != DEF_setLeds_requestFifo_fifo_notFull____d10)
      {
	vcd_write_val(sim_hdl, num, DEF_setLeds_requestFifo_fifo_notFull____d10, 1u);
	backing.DEF_setLeds_requestFifo_fifo_notFull____d10 = DEF_setLeds_requestFifo_fifo_notFull____d10;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_NOT_setLeds_requestFifo_count___d5, 1u);
      backing.DEF_NOT_setLeds_requestFifo_count___d5 = DEF_NOT_setLeds_requestFifo_count___d5;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_setLeds_requestFifo_count__h354, 1u);
      backing.DEF_setLeds_requestFifo_count__h354 = DEF_setLeds_requestFifo_count__h354;
      vcd_write_val(sim_hdl, num++, DEF_setLeds_requestFifo_fifo_i_notEmpty____d14, 1u);
      backing.DEF_setLeds_requestFifo_fifo_i_notEmpty____d14 = DEF_setLeds_requestFifo_fifo_i_notEmpty____d14;
      vcd_write_val(sim_hdl, num++, DEF_setLeds_requestFifo_fifo_notFull____d10, 1u);
      backing.DEF_setLeds_requestFifo_fifo_notFull____d10 = DEF_setLeds_requestFifo_fifo_notFull____d10;
    }
}

void MOD_mkLedControllerRequestInputPipes::vcd_prims(tVCDDumpType dt,
						     MOD_mkLedControllerRequestInputPipes &backing)
{
  INST_setLeds_requestFifo_count.dump_VCD(dt, backing.INST_setLeds_requestFifo_count);
  INST_setLeds_requestFifo_fbnbuff.dump_VCD(dt, backing.INST_setLeds_requestFifo_fbnbuff);
  INST_setLeds_requestFifo_fifo.dump_VCD(dt, backing.INST_setLeds_requestFifo_fifo);
}
