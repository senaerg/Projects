//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// timestamp removed
//
//
// Ports:
// Name                         I/O  size props
// portalIfc_messageSize          O    16 const
// RDY_portalIfc_messageSize      O     1 const
// RDY_portalIfc_requests_0_enq   O     1
// portalIfc_requests_0_notFull   O     1 reg
// RDY_portalIfc_requests_0_notFull  O     1 const
// portalIfc_intr_status          O     1 const
// RDY_portalIfc_intr_status      O     1 const
// portalIfc_intr_channel         O    32 const
// RDY_portalIfc_intr_channel     O     1 const
// setLeds_PipeOut_first          O    40 reg
// RDY_setLeds_PipeOut_first      O     1 reg
// RDY_setLeds_PipeOut_deq        O     1 reg
// setLeds_PipeOut_notEmpty       O     1 reg
// RDY_setLeds_PipeOut_notEmpty   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// portalIfc_messageSize_methodNumber  I    16 unused
// portalIfc_requests_0_enq_v     I    32 reg
// EN_portalIfc_requests_0_enq    I     1
// EN_setLeds_PipeOut_deq         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkLedControllerRequestInputPipes(CLK,
					RST_N,

					portalIfc_messageSize_methodNumber,
					portalIfc_messageSize,
					RDY_portalIfc_messageSize,

					portalIfc_requests_0_enq_v,
					EN_portalIfc_requests_0_enq,
					RDY_portalIfc_requests_0_enq,

					portalIfc_requests_0_notFull,
					RDY_portalIfc_requests_0_notFull,

					portalIfc_intr_status,
					RDY_portalIfc_intr_status,

					portalIfc_intr_channel,
					RDY_portalIfc_intr_channel,

					setLeds_PipeOut_first,
					RDY_setLeds_PipeOut_first,

					EN_setLeds_PipeOut_deq,
					RDY_setLeds_PipeOut_deq,

					setLeds_PipeOut_notEmpty,
					RDY_setLeds_PipeOut_notEmpty);
  input  CLK;
  input  RST_N;

  // value method portalIfc_messageSize
  input  [15 : 0] portalIfc_messageSize_methodNumber;
  output [15 : 0] portalIfc_messageSize;
  output RDY_portalIfc_messageSize;

  // action method portalIfc_requests_0_enq
  input  [31 : 0] portalIfc_requests_0_enq_v;
  input  EN_portalIfc_requests_0_enq;
  output RDY_portalIfc_requests_0_enq;

  // value method portalIfc_requests_0_notFull
  output portalIfc_requests_0_notFull;
  output RDY_portalIfc_requests_0_notFull;

  // value method portalIfc_intr_status
  output portalIfc_intr_status;
  output RDY_portalIfc_intr_status;

  // value method portalIfc_intr_channel
  output [31 : 0] portalIfc_intr_channel;
  output RDY_portalIfc_intr_channel;

  // value method setLeds_PipeOut_first
  output [39 : 0] setLeds_PipeOut_first;
  output RDY_setLeds_PipeOut_first;

  // action method setLeds_PipeOut_deq
  input  EN_setLeds_PipeOut_deq;
  output RDY_setLeds_PipeOut_deq;

  // value method setLeds_PipeOut_notEmpty
  output setLeds_PipeOut_notEmpty;
  output RDY_setLeds_PipeOut_notEmpty;

  // signals for module outputs
  wire [39 : 0] setLeds_PipeOut_first;
  wire [31 : 0] portalIfc_intr_channel;
  wire [15 : 0] portalIfc_messageSize;
  wire RDY_portalIfc_intr_channel,
       RDY_portalIfc_intr_status,
       RDY_portalIfc_messageSize,
       RDY_portalIfc_requests_0_enq,
       RDY_portalIfc_requests_0_notFull,
       RDY_setLeds_PipeOut_deq,
       RDY_setLeds_PipeOut_first,
       RDY_setLeds_PipeOut_notEmpty,
       portalIfc_intr_status,
       portalIfc_requests_0_notFull,
       setLeds_PipeOut_notEmpty;

  // register setLeds_requestFifo_count
  reg setLeds_requestFifo_count;
  wire setLeds_requestFifo_count_D_IN, setLeds_requestFifo_count_EN;

  // register setLeds_requestFifo_fbnbuff
  reg [63 : 0] setLeds_requestFifo_fbnbuff;
  wire [63 : 0] setLeds_requestFifo_fbnbuff_D_IN;
  wire setLeds_requestFifo_fbnbuff_EN;

  // ports of submodule setLeds_requestFifo_fifo
  wire [39 : 0] setLeds_requestFifo_fifo_D_IN, setLeds_requestFifo_fifo_D_OUT;
  wire setLeds_requestFifo_fifo_CLR,
       setLeds_requestFifo_fifo_DEQ,
       setLeds_requestFifo_fifo_EMPTY_N,
       setLeds_requestFifo_fifo_ENQ,
       setLeds_requestFifo_fifo_FULL_N;

  // remaining internal signals
  wire x__h362;

  // value method portalIfc_messageSize
  assign portalIfc_messageSize = 16'd40 ;
  assign RDY_portalIfc_messageSize = 1'd1 ;

  // action method portalIfc_requests_0_enq
  assign RDY_portalIfc_requests_0_enq =
	     !setLeds_requestFifo_count || setLeds_requestFifo_fifo_FULL_N ;

  // value method portalIfc_requests_0_notFull
  assign portalIfc_requests_0_notFull = setLeds_requestFifo_fifo_FULL_N ;
  assign RDY_portalIfc_requests_0_notFull = 1'd1 ;

  // value method portalIfc_intr_status
  assign portalIfc_intr_status = 1'd0 ;
  assign RDY_portalIfc_intr_status = 1'd1 ;

  // value method portalIfc_intr_channel
  assign portalIfc_intr_channel = 32'hFFFFFFFF ;
  assign RDY_portalIfc_intr_channel = 1'd1 ;

  // value method setLeds_PipeOut_first
  assign setLeds_PipeOut_first = setLeds_requestFifo_fifo_D_OUT ;
  assign RDY_setLeds_PipeOut_first = setLeds_requestFifo_fifo_EMPTY_N ;

  // action method setLeds_PipeOut_deq
  assign RDY_setLeds_PipeOut_deq = setLeds_requestFifo_fifo_EMPTY_N ;

  // value method setLeds_PipeOut_notEmpty
  assign setLeds_PipeOut_notEmpty = setLeds_requestFifo_fifo_EMPTY_N ;
  assign RDY_setLeds_PipeOut_notEmpty = 1'd1 ;

  // submodule setLeds_requestFifo_fifo
  FIFO1 #(.width(32'd40),
	  .guarded(32'd1)) setLeds_requestFifo_fifo(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(setLeds_requestFifo_fifo_D_IN),
						    .ENQ(setLeds_requestFifo_fifo_ENQ),
						    .DEQ(setLeds_requestFifo_fifo_DEQ),
						    .CLR(setLeds_requestFifo_fifo_CLR),
						    .D_OUT(setLeds_requestFifo_fifo_D_OUT),
						    .FULL_N(setLeds_requestFifo_fifo_FULL_N),
						    .EMPTY_N(setLeds_requestFifo_fifo_EMPTY_N));

  // register setLeds_requestFifo_count
  assign setLeds_requestFifo_count_D_IN =
	     !setLeds_requestFifo_count && x__h362 ;
  assign setLeds_requestFifo_count_EN = EN_portalIfc_requests_0_enq ;

  // register setLeds_requestFifo_fbnbuff
  assign setLeds_requestFifo_fbnbuff_D_IN =
	     { setLeds_requestFifo_fbnbuff[31:0],
	       portalIfc_requests_0_enq_v } ;
  assign setLeds_requestFifo_fbnbuff_EN = EN_portalIfc_requests_0_enq ;

  // submodule setLeds_requestFifo_fifo
  assign setLeds_requestFifo_fifo_D_IN =
	     { setLeds_requestFifo_fbnbuff[7:0],
	       portalIfc_requests_0_enq_v } ;
  assign setLeds_requestFifo_fifo_ENQ =
	     EN_portalIfc_requests_0_enq && setLeds_requestFifo_count ;
  assign setLeds_requestFifo_fifo_DEQ = EN_setLeds_PipeOut_deq ;
  assign setLeds_requestFifo_fifo_CLR = 1'b0 ;

  // remaining internal signals
  assign x__h362 = setLeds_requestFifo_count + 1'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        setLeds_requestFifo_count <= `BSV_ASSIGNMENT_DELAY 1'd0;
	setLeds_requestFifo_fbnbuff <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (setLeds_requestFifo_count_EN)
	  setLeds_requestFifo_count <= `BSV_ASSIGNMENT_DELAY
	      setLeds_requestFifo_count_D_IN;
	if (setLeds_requestFifo_fbnbuff_EN)
	  setLeds_requestFifo_fbnbuff <= `BSV_ASSIGNMENT_DELAY
	      setLeds_requestFifo_fbnbuff_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    setLeds_requestFifo_count = 1'h0;
    setLeds_requestFifo_fbnbuff = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkLedControllerRequestInputPipes

